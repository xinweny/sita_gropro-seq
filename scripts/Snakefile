#### Packages ####
import glob, os
import pandas as pd
import math

#### Functions ####
def get_layout(metadata_path):
    metadata = pd.read_csv(metadata_path, header=0, sep=',')

    return metadata['LibraryLayout'][0]

def get_organism(metadata_path):
    metadata = pd.read_csv(metadata_path, header=0, sep=',')
    organism_name = metadata['Organism'][0]

    return organism_name.replace(' ', '_').lower()

def get_samples(path, ext):
    samples = set([os.path.basename(sample).replace(f".{ext}", '') for sample in glob.glob(f"{path}*.{ext}")])

    if LAYOUT == 'PAIRED':
        samples = set([sample[:-2] for sample in samples])

    return samples

def get_raw_reads(wcs):
    if LAYOUT == 'PAIRED':  # Paired-end
        path = expand(f"{PREFIX}/fastq/{wcs.sample}_{{i}}.fastq.gz", i=[1, 2])

        if not os.path.exists(path[0]):
            path = expand(f"{PREFIX}/fastq/other/{wcs.sample}_{{i}}.fastq.gz", i=[1, 2])
        
        return path

    elif LAYOUT == 'SINGLE':  # Single-end
        path = f"{PREFIX}/fastq/{wcs.sample}.fastq.gz"

        if not os.path.exists(path):
            path = f"{PREFIX}/fastq/other/{wcs.sample}.fastq.gz"

        return path

def custom_param(param, default):
    try:
        return config[param]

    except KeyError:
        return default

def roundup(x, power):
    tens = 10 ** power
    return int(math.ceil(x / tens)) * tens

def infer_strandedness(bedgenome_path, bam_path):
    p = subprocess.Popen(['infer_experiment.py', '-r', bedgenome_path, '-i', bam_path],
            stdout=subprocess.PIPE)
    output = str(p.stdout.read())

    print(output)

    rseqc_out = output.split('\\n')
    fr_firststrand = float(rseqc_out[5].split(' ')[-1])
    fr_secondstrand = float(rseqc_out[4].split(' ')[-1])

    print(f"Fraction of reads to same strand: {fr_secondstrand}")
    print(f"Fraction of reads to reverse strand: {fr_firststrand}")

    threshold = 0.70

    if fr_firststrand > threshold:
        library_type = 'fr-firststrand'
    elif fr_secondstrand > threshold:
        library_type = 'fr-secondstrand'
    else:
        library_type = 'fr-unstranded'

    if library_type == 'fr-firststrand':
        strandedness = "-S"
    elif library_type == 'fr-secondstrand':
        strandedness = "-s"
    elif library_type == 'fr-unstranded':
        strandedness = ""

    return strandedness

#### Config ####
configfile: "config/config.yaml"
workdir: config['base']

PREFIX = f"data/{config['GSE']}"

# Get layout and organism info from SraRunTable file (obtainable from SRA Run Selector)、otherwise specify on command line
if os.path.exists(f"{PREFIX}/SraRunTable_{config['GSE']}.txt"):
    LAYOUT = get_layout(f"{PREFIX}/SraRunTable_{config['GSE']}.txt")
    ORGANISM = get_organism(f"{PREFIX}/SraRunTable_{config['GSE']}.txt")
else:
    LAYOUT = config['layout']
    ORGANISM = config['organism']

SAMPLES = get_samples(f"{PREFIX}/fastq/**/", 'fastq.gz')
SELECT_SAMPLES = get_samples(f"{PREFIX}/fastq/", 'fastq.gz')

#### Workflow ####
rule all:
    input:
        expand(f"{PREFIX}/star/{{sample}}.bam", sample=SAMPLES),
        expand(f"{PREFIX}/star/{{sample}}.bam.bai", sample=SAMPLES),
#        expand(f"{PREFIX}/bigwig/{{sample}}.coverage.bw", sample=SAMPLES),
#        expand(f"{PREFIX}/bigwig/{{sample}}.coverage.offset.bw", sample=SAMPLES),
        f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}.bed",
        f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_GeneBody.bed",
        f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_Promoter.bed",
        f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_LongGeneEnd_{config['treatment_min']}min.bed",
        f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_GeneDesert.bed",
        f"{PREFIX}/bedtools_multicov/{config['GSE']}_GeneDesertCounts.txt",
        f"{PREFIX}/bedtools_multicov/{config['GSE']}_{config['treatment_min']}min_LongGeneEndCounts.txt",
        f"{PREFIX}/bedtools_multicov/{config['GSE']}_PromoterCounts.txt",
        f"{PREFIX}/bedtools_multicov/{config['GSE']}_GeneBodyCounts.txt",
        f"{PREFIX}/bedtools_multicov/{config['GSE']}_GeneBodyCounts_filtered.txt"
    params:
        job_name = f"{config['GSE']}_ALL"
    resources:
        time_min = 1,
        cpus = 1

# Step 1: Remove sequencing adapters from reads
rule trimgalore_single:
    input:
        get_raw_reads
    output:
        f"{PREFIX}/fastq_trimmed/{{sample}}_trimmed.fq.gz"
    params:
        job_name = f"{config['GSE']}_{{sample}}_TRIMSINGLE"
    resources:
        time_min = int(custom_param('trim_time', 30)),
        cpus = int(custom_param('trim_cpus', 12))
    log: f"{PREFIX}/fastq/logs/Trim_galore.{{sample}}.log"
    benchmark: f"{PREFIX}/fastq/.benchmark/Trim_galore.{{sample}}.benchmark"
    shell:
        f"""
        trim_galore -j {{resources.cpus}} \
        --stringency 2 -q 30 --FASTQc \
        -o {PREFIX}/fastq_trimmed {{input}} --gzip &> {{log}}
        """

rule trimgalore_paired:
    input:
        get_raw_reads
    output:
        f"{PREFIX}/fastq_trimmed/{{sample}}_1_val_1.fq.gz",
        f"{PREFIX}/fastq_trimmed/{{sample}}_2_val_2.fq.gz"
    params:
        job_name = f"{config['GSE']}_{{sample}}_TRIMPAIRED"
    resources:
        time_min = int(custom_param('trim_time', 30)),
        cpus = int(custom_param('trim_cpus', 24))
    log: f"{PREFIX}/fastq/log/Trim_galore.{{sample}}.log"
    benchmark: f"{PREFIX}/fastq/.benchmark/Trim_galore.{{sample}}.benchmark"
    shell:
        f"""
        trim_galore -j {{resources.cpus}} \
        --stringency 2 -q 30 --paired --FASTQc \
        -o {PREFIX}/fastq_trimmed {{input}} --gzip &> {{log}}
        """

# Step 2: filter out ribosomal reads
rule filter_ribo_single:
    input:
        rules.trimgalore_single.output
    output:
        f"{PREFIX}/fastq_filtered/{{sample}}_rRNA_filtered.fq.gz"
    params:
        job_name = f"{config['GSE']}_{{sample}}_ALIGNRIBO_SINGLE",
        input_command = lambda wildcards, input: f"-U {input}",
        output_command = lambda wildcards, output: f"--un-gz {output}",
        ribosomal = config[ORGANISM]['bt_ribosomal']
    resources:
        time_min = int(custom_param('bt_time', 60)),
        cpus = int(custom_param('bt_cpus', 20))
    conda: "env/gropro-seq.yml"
    log: f"{PREFIX}/fastq_filtered/log/{{sample}}_Bowtie2.rRNA.log"
    shell:
        """
        bowtie2 --very-fast-local --quiet \
        -x {params.ribosomal} \
        -p {resources.cpus} \
        {params.output_command} \
        {params.input_command} > /dev/null 2> {log}
        """

rule filter_ribo_paired:
    input:
        rules.trimgalore_paired.output
    output:
        f"{PREFIX}/fastq_filtered/{{sample}}_rRNA_filtered_R1.fq.gz",
        f"{PREFIX}/fastq_filtered/{{sample}}_rRNA_filtered_R2.fq.gz"
    params:
        job_name = f"{config['GSE']}_{{sample}}_ALIGNRIBO_PAIRED",
        input_command = lambda wildcards, input: f"-1 {input[0]} -2 {input[1]}",
        output_command = lambda wildcards, output: f"--un-conc-gz {output[0].replace('R1.fq.gz', 'R%.fq.gz')}",
        ribosomal = config[ORGANISM]['bt_ribosomal']
    resources:
        time_min = int(custom_param('bt_time', 60)),
        cpus = int(custom_param('bt_cpus', 30))
    conda: "env/gropro-seq.yml"
    log: f"{PREFIX}/fastq_filtered/log/{{sample}}_Bowtie2.rRNA.log"
    shell:
        """
        bowtie2 --very-fast-local --quiet \
        -x {params.ribosomal} \
        -p {resources.cpus} \
        {params.output_command} \
        {params.input_command} > /dev/null 2> {log}
        """

# Step 3: map unmapped/non-ribosomal reads to genome
rule star_align:
    input:
        rules.filter_ribo_paired.output if LAYOUT == 'PAIRED' else rules.filter_ribo_single.output
    output:
        bam = f"{PREFIX}/star/{{sample}}.bam",
	    bai = f"{PREFIX}/star/{{sample}}.bam.bai"
    params:
        job_name = f"{config['GSE']}_{{sample}}_STAR",
        genome_dir = config[ORGANISM]['star'],
	    genes_gtf = config[ORGANISM]['genes_gtf'],
        prefix = f"{PREFIX}/star/{{sample}}"
    resources:
        time_min = int(custom_param('star_time', 30)),
        cpus = 16
    log: f"{PREFIX}/star/log/STAR_mapping.{{sample}}.log"
    shell:
        """
        STAR --runThreadN {resources.cpus} \
        --runMode alignReads \
        --outFilterMultimapNmax 100 \
        --winAnchorMultimapNmax 100 \
        --alignEndsType EndToEnd \
        --alignIntronMax 1 \
        --readFilesIn {input} \
        --readFilesCommand zcat \
        --outFileNamePrefix {params.prefix} \
        --outSAMtype BAM SortedByCoordinate \
        --outFilterMismatchNmax 3 \
        --outFilterMismatchNoverLmax 0.12 \
        --alignSoftClipAtReferenceEnds No \
        --outSAMunmapped Within \
        --sjdbGTFfile {params.genes_gtf} --genomeDir {params.genome_dir} > {log}

        mv {params.prefix}Aligned.sortedByCoord.out.bam {output.bam}

	    samtools index {output.bam}
        """

# Step 5: Generate counts tables for background, long genes and protein-coding genes
rule generate_beds:
    output:
        gene_bed = f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}.bed",
        gene_body_bed = f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_GeneBody.bed",
        promoter_bed = f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_Promoter.bed",
        long_gene_bed = f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_LongGeneEnd_{config['treatment_min']}min.bed",
        gene_desert_bed = f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}_GeneDesert.bed"
    params:
        genes_gtf = config[ORGANISM]['genes_gtf'],
        output_bed_prefix = f"{PREFIX}/bed_regions/{os.path.basename(config[ORGANISM]['genes_gtf'])[:-4]}",
        bedtools_genome = f"{config[ORGANISM]['star']}/chrNameLength.txt",
        treatment_min = int(config['treatment_min']),
        long_gene_length = int(config['treatment_min']) * 6000,
        long_gene_thresh = int(custom_param('long_gene_thresh', roundup(int(config['treatment_min']) * 6000, 5))),
        shift = 10000,
        gene_desert_thresh = 1000000,
        transcript_id_col = 12 + 1,
        promoter_width = 250,
        tss_shift = 2500,
        tes_shift = 500,
        transcript_length_thresh = 5000,
        job_name = f"{config['GSE']}_GENERATEBEDS"
    resources:
        time_min = 30,
        cpus = 1
    shell:
        """
        # Generate gene BED file
            awk '$3 == "gene" {{ OFS="\\t"; print $0 }}' {params.genes_gtf} | \
            awk '{{ OFS="\\t"; print $1,$4,$5,$10,$6,$7 }}' | \
            sed 's/[";]//g' | sort -k1,1V -k2,2n | egrep -v '^H' > \
            {output.gene_bed}

        # Generate long-end gene BED file
            awk '{{ OFS = "\\t"; 
                if($3-$2 >= {params.long_gene_thresh} && $6 == "+") \
                    print $1,$2+{params.long_gene_length}+{params.shift},$3-{params.shift},$4,$5,$6; \
                else if($3-$2 >= {params.long_gene_thresh} && $6 == "-") \
                    print $1,$2+{params.shift},$3-{params.long_gene_length}-{params.shift},$4,$5,$6 }}' {output.gene_bed} > \
            {output.long_gene_bed}

        # Generate gene desert BED file
            bedtools closest -a {output.gene_bed} -b {output.gene_bed} -N -iu -D a | \
            awk '{{ OFS="\\t"; \
                if($6 == "+" && $13 > {params.gene_desert_thresh}) \
                    print $1,$3+{params.shift},$3+$13-{params.shift}; \
                else if( $6 == "-" && $13 > {params.gene_desert_thresh}) \
                    print $1,$2-$13+{params.shift},$2-{params.shift} }}' > \
            {params.output_bed_prefix}_GeneDesertDownstream.bed

            bedtools closest -a {output.gene_bed} -b {output.gene_bed} -N -id -D a | \
            awk '{{ OFS="\\t"; \
            if($6 == "+" && $13 < -{params.gene_desert_thresh}) \
                print $1,$2+$13+{params.shift},$2-{params.shift}; \
            else if($6 == "-" && $13 < -{params.gene_desert_thresh}) \
                print $1,$3+{params.shift},$3-$13-{params.shift} }}' > \
            {params.output_bed_prefix}_GeneDesertUpstream.bed

            cat {params.output_bed_prefix}_GeneDesertDownstream.bed {params.output_bed_prefix}_GeneDesertUpstream.bed | sort -k1,1V -k2,2n | \
            bedtools merge -i stdin > {output.gene_desert_bed}

        # Generate promoter and gene body BED files
            awk '$3 == "transcript" {{ print }}' {params.genes_gtf} | gtf2bed | \
            awk '{{ OFS="\\t"; \
                if($6 == "+") \
                    print $1,$2,$2+1,$4,$5,$6,${params.transcript_id_col}; \
                else if($6 == "-") \
                    print $1,$3-1,$3,$4,$5,$6,${params.transcript_id_col} }}' | sed 's/[";]//g' |
            bedtools slop -i stdin -g {params.bedtools_genome} -b {params.promoter_width} > \
            {output.promoter_bed}

            awk '$3 == "transcript" {{ print }}' {params.genes_gtf} | gtf2bed | \
            awk '{{ OFS="\\t"; \
                if($3-$2 >= {params.transcript_length_thresh} && $6 == "+") \
                    print $1,$2+{params.tss_shift},$3-{params.tes_shift},$4,$5,$6,${params.transcript_id_col}; \
                else if($3-$2 >= {params.transcript_length_thresh} && $6 == "-") \
                    print $1,$2+{params.tes_shift},$3-{params.tss_shift},$4,$5,$6,${params.transcript_id_col} }}' | \
            sed 's/[";]//g' > \
            {output.gene_body_bed}
        """

rule bedtools_multicov:
    input:
        bams = expand(f"{PREFIX}/star/{{sample}}.bam", sample=SELECT_SAMPLES),
        gene_bed = rules.generate_beds.output.gene_bed,
        long_gene_bed = rules.generate_beds.output.long_gene_bed,
        gene_desert_bed = rules.generate_beds.output.gene_desert_bed,
        promoter_bed = rules.generate_beds.output.promoter_bed,
        gene_body_bed = rules.generate_beds.output.gene_body_bed
    output:
        gene_desert_counts = f"{PREFIX}/bedtools_multicov/{config['GSE']}_GeneDesertCounts.txt",
        long_gene_counts = f"{PREFIX}/bedtools_multicov/{config['GSE']}_{config['treatment_min']}min_LongGeneEndCounts.txt",
        promoter_counts = f"{PREFIX}/bedtools_multicov/{config['GSE']}_PromoterCounts.txt",
        gene_body_counts = f"{PREFIX}/bedtools_multicov/{config['GSE']}_GeneBodyCounts.txt"
    resources:
        time_min = int(custom_param('count_time', 180)),
        cpus = 2
    params:
        job_name = f"{config['GSE']}_BEDTOOLSMULTICOV"
    run:
        sample_names = "\\t".join(map(lambda x: os.path.basename(x)[:-4], input.bams))
        strandedness = str(custom_param('strandedness', infer_strandedness(input.gene_bed, input.bams[0])))

        print(f"Strandedness for multicov: {strandedness}")

        shell(f"""
        # Count reads at regions for normalisation
            bedtools multicov {strandedness} -bams {{input.bams}} -bed {{input.long_gene_bed}} | \
            sed '1 i chr\\tstart\\tend\\tname\\tscore\\tstrand\\t{sample_names}' > {{output.long_gene_counts}}

            bedtools multicov {strandedness} -bams {{input.bams}} -bed {{input.gene_desert_bed}} | \
            sed '1 i chr\\tstart\\tend\\t{sample_names}' > {{output.gene_desert_counts}}

        # Count reads at promoter and gene body
            bedtools multicov {strandedness} -bams {{input.bams}} -bed {{input.promoter_bed}} | \
            sed '1 i chr\\tstart\\tend\\tname\\tscore\\tstrand\\ttranscript_id\\t{sample_names}' > {{output.promoter_counts}} \
            & PROMOTER=$!
            bedtools multicov {strandedness} -bams {{input.bams}} -bed {{input.gene_body_bed}} | \
            sed '1 i chr\\tstart\\tend\\tname\\tscore\\tstrand\\ttranscript_id\\t{sample_names}' > {{output.gene_body_counts}} \
            & GENEBODY=$!

        wait $PROMOTER
        wait $GENEBODY
        """)

rule filter_genebody:
    input:
        gene_bed = rules.generate_beds.output.gene_bed,
        promoter_counts = rules.bedtools_multicov.output.promoter_counts,
        gene_body_counts = rules.bedtools_multicov.output.gene_body_counts
    output:
        f"{PREFIX}/bedtools_multicov/{config['GSE']}_GeneBodyCounts_filtered.txt"
    params:
        job_name = f"{config['GSE']}_FILTERGENEBODY",
        rpm_thresh = 1,
        dist_thresh = 1000,
        bedtools_genome = f"{config[ORGANISM]['star']}/chrNameLength.txt",
        tss_shift = 2500,
        tes_shift = 500
    resources:
        time_min = 30,
        cpus = 1
    shell:
        """
        python3 script/filter_genebody_counts.py \
        -p {input.promoter_counts} -b {input.gene_body_counts} \
        -r {params.rpm_thresh} -d {params.dist_thresh} \
        -g {input.gene_bed} -c {params.bedtools_genome} \
        -sl {params.tss_shift} -sr {params.tes_shift} \
        -o {output}
        """

# Step 4: bigwig generation
# rule bamcoverage_bigwig:
#     input:
#         rules.star_align.output.bam
#     output:
#         f"{PREFIX}/bigwig/{{sample}}.coverage.bw"
#     params:
#         job_name = f"{config['GSE']}_{{sample}}_BAMCOV",
#         blacklist = config[ORGANISM]['blacklist_bed']
#     resources:
#         time_min = 30,
#         cpus = 20
#     conda: "env/gropro-seq.yml"
#     log: f"{PREFIX}/bigwig/log/bamCoverage.{{sample}}.coverage.log"
#     shell:
#         """
#         bamCoverage -b {input} -p {resources.cpus} -o {output} \
#         --binSize 1 \
#         --blackListFileName {params.blacklist} --skipNAs &> {log}
#         """

# rule bamcoverage_bigwig_offset:
#     input:
#         rules.star_align.output.bam
#     output:
#         f"{PREFIX}/bigwig/{{sample}}.coverage.offset.bw"
#     params:
#         job_name = f"{config['GSE']}_{{sample}}_BAMCOVOFF",
#         blacklist = config[ORGANISM]['blacklist_bed']
#     resources:
#         time_min = 30,
#         cpus = 20
#     conda: "env/gropro-seq.yml"
#     log: f"{PREFIX}/bigwig/log/bamCoverage.{{sample}}.coverage.offset.log"
#     shell:
#         """
#         bamCoverage -b {input} -p {resources.cpus} -o {output} \
#         --binSize 1 --Offset 1 --samFlagInclude 64 \
#         --blackListFileName {params.blacklist} --skipNAs &> {log}
#         """